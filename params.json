{"name":"Vitruvius","tagline":"A set of easy-to-use Kinect utilities that will speed-up the development of your projects.","body":"Vitruvius\r\n=========\r\n\r\nVitruvius is a set of easy-to-use Kinect utilities that will speed-up the development of your projects. Supports gesture detection, skeleton drawing, frame capturing, voice recognition and much more.\r\n\r\nGreat news for early-access developers: Vitruvius supports Kinect for Windows version 2 sensor!\r\n\r\nNEW: Vitruvius now supports WinRT for Windows Store apps.\r\n\r\nFeatures\r\n---\r\n\r\n### Skeletal extensions\r\n* Joint scaling, proper for on-screen display\r\n* User height\r\n* Distance between joints\r\n* One-line skeleton tracking\r\n\r\n### WPF, WinForms & WinRT utilities\r\n* Easily display color, depth and infrared frames\r\n* Save Kinect frames as bitmap images\r\n* One-line skeleton drawing\r\n* Record color, depth and infrared streams and save into video files (WinRT only)\r\n\r\n### Gestures\r\n* WaveLeft\r\n* WaveRight\r\n* SwipeLeft\r\n* SwipeRight\r\n* JoinedHands\r\n* SwipeUp\r\n* SwipeDown\r\n* ZoomIn\r\n* ZoomOut\r\n* Menu\r\n\r\n### Voice recognition & text-to-speech (v1 only)\r\n* Recognize voice commands\r\n* Speech synthesis\r\n\r\n### Coming very soon\r\n* Complete finger tracking\r\n* Posture support (jumping, dancing, etc)\r\n\r\nPrerequisites\r\n---\r\n* [Kinect for Windows](http://amzn.to/1k7rquZ) or [Kinect for XBOX](http://amzn.to/1dO0R0s) sensor\r\n* [Kinect for Windows SDK v1.8](http://go.microsoft.com/fwlink/?LinkID=323588)\r\n\r\nIf you are developing using the developer preview Kinect SDK v2, you need the appropriate hardware and software provided by Microsoft.\r\n\r\nInstallation\r\n---\r\n* Download project's source code and build the solution that matches the version of your sensor. Version 2 refers to the private Developer Preview Kinect for Windows sensor.\r\n\r\nExamples\r\n---\r\n\r\n1. Displaying Kinect color frames:\r\n\r\n        void Sensor_ColorFrameReady(object sender, ColorImageFrameReadyEventArgs e)\r\n        {\r\n            using (var frame = e.OpenColorImageFrame())\r\n            {\r\n                if (frame != null)\r\n                {\r\n                    // Display on screen\r\n                    image.Source = frame.ToBitmap();\r\n                    \r\n                    // Capture JPEG file\r\n                    frame.Capture(\"C:\\\\ColorFrame.jpg\");\r\n                }\r\n            }\r\n        }\r\n        \r\n2. Displaying Kinect depth frames:\r\n\r\n        void Sensor_DepthFrameReady(object sender, DepthImageFrameReadyEventArgs e)\r\n        {\r\n            using (var frame = e.OpenDepthImageFrame())\r\n            {\r\n                if (frame != null)\r\n                {\r\n                    // Display on screen\r\n                    image.Source = frame.ToBitmap();\r\n                    \r\n                    // Capture JPEG file\r\n                    frame.Capture(\"C:\\\\DepthFrame.jpg\");\r\n                }\r\n            }\r\n        }\r\n        \r\n3. Drawing a skeleton and getting its height:\r\n\r\n        void Sensor_SkeletonFrameReady(object sender, SkeletonFrameReadyEventArgs e)\r\n        {\r\n            using (var frame = e.OpenSkeletonFrame())\r\n            {\r\n                if (frame != null)\r\n                {\r\n                    canvas.ClearSkeletons();\r\n                    \r\n                    var skeletons = frame.Skeletons().Where(s => s.TrackingState == SkeletonTrackingState.Tracked);\r\n                    \r\n                    foreach (var skeleton in skeletons)\r\n                    {\r\n                        if (skeleton != null)\r\n                        {\r\n                            // Draw the skeleton.\r\n                            canvas.DrawSkeleton(skeleton);\r\n                                \r\n                            // Get the skeleton height.\r\n                            double height = skeleton.Height();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n4. Detecting gestures:\r\n\r\n        GestureController gestureController = new GestureController(GestureType.All);\r\n        gestureController.GestureRecognized += GestureController_GestureRecognized;\r\n        \r\n        // ...\r\n        \r\n        void Sensor_SkeletonFrameReady(object sender, SkeletonFrameReadyEventArgs e)\r\n        {\r\n            using (var frame = e.OpenSkeletonFrame())\r\n            {\r\n                if (frame != null)\r\n                {\r\n                    var skeletons = frame.Skeletons().Where(s => s.TrackingState == SkeletonTrackingState.Tracked);\r\n                    \r\n                    foreach (var skeleton in skeletons)\r\n                    {\r\n                        if (skeleton != null)\r\n                        {\r\n                            // Update skeleton gestures.\r\n                            gestureController.Update(skeleton);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        // ...\r\n        \r\n        void GestureController_GestureRecognized(object sender, GestureEventArgs e)\r\n        {\r\n            // Display the recognized gesture's name.\r\n            Debug.WriteLine(e.Name);\r\n        }\r\n\r\n5. Recognizing and synthesizing voice:\r\n\r\n        VoiceController voiceController = new VoiceController();\r\n        voiceController.SpeechRecognized += VoiceController_SpeechRecognized;\r\n        \r\n        KinectSensor sensor = SensorExtensions.Default();\r\n        List<string> phrases = new List<string> { \"Hello\", \"Goodbye\" };\r\n        \r\n        voiceController.StartRecognition(sensor, phrases);\r\n        \r\n        // ...\r\n        \r\n        void VoiceController_SpeechRecognized(object sender, Microsoft.Speech.Recognition.SpeechRecognizedEventArgs e)\r\n        {\r\n            string text = e.Result.Text;\r\n            \r\n            voiceController.Speak(\"I recognized the words: \" + text);\r\n        }\r\n\r\nCredits\r\n---\r\n* Developed by [Vangos Pterneas](http://pterneas.com) for [LightBuzz](http://lightbuzz.com)\r\n* Developed by [George Karakatsiotis](http://gkarak.com) for [LightBuzz](http://lightbuzz.com)\r\n* Gesture detection partly based on [Fizbin](https://github.com/EvilClosetMonkey/Fizbin.Kinect.Gestures) library, by [Nicholas Pappas](http://www.exceptontuesdays.com/)\r\n\r\nLicense\r\n---\r\nYou are free to use these libraries in personal and commercial projects by attributing the original creator of Vitruvius. Licensed under [Apache v2 License](https://github.com/LightBuzz/Vitruvius/blob/master/LICENSE).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}